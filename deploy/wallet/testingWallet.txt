Assume wallet is 2of3 with daily limit of 900 wei.

TO DEPLOY USING TRUFFLE 1.0
create project dir and go in it
truffle init
Put Wallet.sol (rename to capital W) in contract dir and remove others
Put deployWallet.js in the root of truffle project dir
In truffle.js add:
module.exports = {
  "after_deploy": ["deployWallet.js"]
}
and comment out the values in the "deploy" array
Then run `truffle deploy`


For testing, run these commands in a `truffle console`.

LOAD WALLET
var walletAddr = '0x338c1d1aaada5b55c2edaac20630ad6682f5ad3f';
eth.sendTransaction({from: eth.accounts[0], to: walletAddr, gas: 999000, value: 50000});


var walletAddr = '0x338c1d1aaada5b55c2edaac20630ad6682f5ad3f';
var first = '0x9fc6fefd7f33ca29ee17f2bfec944695e5f29caf';
var third = '0xfb365748c912fca6808db267342846645f3289e4';
Wallet.at(walletAddr).execute(third, 100, 0, {from:first, gas:999000});
Wallet.at(walletAddr).execute(third, 500, 0, {from:first, gas:999000});
Wallet.at(walletAddr).execute(third, 300, 0, {from:first, gas:999000});

You can check the balance of third and it should have 900 more wei.
At this stage, the daily withdrawal limit has been reached.
Note: the limit is reset at midnight UTC.


Now, we can set up a `ConfirmationNeeded.watch` or `filter.watch`, before sending more wei.
The purpose is so that we can get the ophash (operation hash), which will need to
be `confirm`ed.  Untested ways are mentioned in the Appendix.

We will proceed by obtaining the ophash from the receipt log.

Now this should not transfer
Wallet.at(walletAddr).execute(third, 7, 0, {from:first, gas:999000}).then(function(txHash) {
  console.log('txHash: ', txHash);
});

You should see that the balance of third does not change.  (If it does change, did
you just pass midnight UTC?)


GET OPERATION HASH
Use eth.getTransactionReceipt on the txHash from `execute`.
There should only be a couple of `logs`.  Look for the log that has `topics`
0x1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf32

0x1733... is equivalent to '0x'+web3.sha3('ConfirmationNeeded(bytes32,address,uint256,address,bytes)')

Now the first 32 bytes of `data` is the operation hash.
Here's an example of `data`:
data: "0xd2ba30ef5c75c50c5ffa58228d7b55ccb49e3a2120e400138c17e355a87af8e80000000000000000000000009fc6fefd7f33ca29ee17f2bfec944695e5f29caf0000000000000000000000000000000000000000000000000000000000000007000000000000000000000000fb365748c912fca6808db267342846645f3289e400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000"

Set ophash to first 32 bytes of `data`:
var ophash = '0xd2ba30ef5c75c50c5ffa58228d7b55ccb49e3a2120e400138c17e355a87af8e8';

Now unlock the 2nd account (in Geth console), then this transfer should work:
var second = '0x235c751c615945c026855a6cbdeda8ea0db65cb7';
Wallet.at(walletAddr).confirm(ophash, {from:second, gas:999000}).then(function(txHash) {
  console.log('txHash: ', txHash);
});

Check the balance of third and it should have 7 more wei.



REMOVE OWNER
Remove the 2nd owner.  It's multisig so do multi:
Wallet.at(walletAddr).removeOwner(second, {from:first, gas:999000}).then(function(txHash) {
  console.log('txHash: ', txHash);
});
Wallet.at(walletAddr).removeOwner(second, {from:second, gas:999000}).then(function(txHash) {
  console.log('txHash: ', txHash);
});






APPENDIX

The operation hash can be obtained by using a `watch`.

Using `ConfirmationNeeded.watch`
This has been tested.

var eventConf = Wallet.at(walletAddr).ConfirmationNeeded();
eventConf.watch(function(err, result){
  if (!err) {
    console.log('eventConf watch: ', result);
    console.log('ophash: ', result.args.operation);
  } else {
    console.log('err watch: ', err);
  }
});

// invoke Wallet.at(walletAddr).execute(third...

eventConf.stopWatching();
The ophash is result.args.operation



Using `filter.watch`.
This hasn't been tested.

var filterConf = web3.eth.filter({topics:['0x'+web3.sha3('ConfirmationNeeded(bytes32,address,uint256,address,bytes)')]});
filterConf.watch(function(err, result){
  if (!err) {
    console.log('@@ watch: ', result);
  } else {
    console.log(err);
  }
});

// invoke Wallet.at(walletAddr).execute(third...

filterConf.stopWatching();
