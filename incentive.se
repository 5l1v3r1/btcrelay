# Incentive for block header relayers is they can set a fee for use of
# the header they store: they are the initial feeRecipient.
# By paying a changeRecipientFee to feeRecipient, anyone can lower the fee and
# become the feeRecipient: this is a mechanism to prevent excessive fees.
#
# Tested by test/test_fee.py

# first 16 bytes are the last gas price; last 16 bytes is the changeRecipientFee
data gasPriceAndChangeRecipientFee

event EthPayment(recipient:indexed, amount)


# sets _feeInfo for the block and updates gasPriceAndChangeRecipientFee
def storeBlockWithFee(blockHeaderBytes:str, feeWei):
    beginGas = msg.gas
    res = self.storeBlockHeader(blockHeaderBytes)
    if res:
        blockHash = m_hashBlockHeader(blockHeaderBytes)
        m_setFeeInfo(blockHash, feeWei, tx.origin)  # note: tx.origin
        remainingGas = msg.gas


        gLastGasPrice = m_getLastGasPrice()

        # TODO can avoid the "else"
        if tx.gasprice < (1023*gLastGasPrice/1024) || tx.gasprice > (1025*gLastGasPrice/1024):
            currGP = gLastGasPrice
        else:
            currGP = tx.gasprice
        gChangeRecipientFee = 2 * currGP * (beginGas - remainingGas)
        gLastGasPrice = currGP

        m_setGasPriceAndChangeRecipientFee(gLastGasPrice, gChangeRecipientFee)

        return(res)


# if the EXACT fee for given txBlockHash is provided, pay the feeRecipient
# and return 1.  otherwise return 0.
# This does NOT return any funds to incorrect callers
def feePaid(txBlockHash, amountWei):
    if msg.value == amountWei:  # does not allow overpayment
        feeRecipient = m_getFeeRecipient(txBlockHash)
        send(feeRecipient, msg.value)
        log(type=EthPayment, feeRecipient, msg.value)
        return(1)
    return(0)


# callers must send EXACTLY the block's current fee, AND feeWei must be LESS
# than the block's current fee
# This does NOT return any funds to incorrect callers
def changeFeeRecipient(blockHash, feeWei, feeRecipient):
    if !self.feePaid(blockHash, m_getChangeRecipientFee(), value=msg.value):
        return(0)

    # feeWei is only allowed to decrease
    if feeWei < m_getFeeAmount(blockHash):
        m_setFeeInfo(blockHash, feeWei, feeRecipient)
        return(1)

    return(0)


def getFeeRecipient(blockHash):
    return(m_getFeeRecipient(blockHash))

def getFeeAmount(blockHash):
    return(m_getFeeAmount(blockHash))

def getChangeRecipientFee():
    return(m_getChangeRecipientFee())


#
# macros for a block's _feeInfo
#
# _feeInfo has first 20 bytes as the feeRecipient and
# the last 12 bytes is the feeAmount
#
macro m_getFeeInfo($blockHash):
    self.block[$blockHash]._feeInfo

macro m_setFeeInfo($blockHash, $feeWei, $feeRecipient):
    $word = ($feeRecipient * BYTES_12) | $feeWei
    self.block[$blockHash]._feeInfo = $word

macro m_getFeeRecipient($blockHash):
    div(m_getFeeInfo($blockHash), BYTES_12)

macro m_getFeeAmount($blockHash):
    0x0000000000000000000000000000000000000000ffffffffffffffffffffffff & m_getFeeInfo($blockHash)


#
# macros for gasPriceAndChangeRecipientFee
#
macro m_getLastGasPrice():
    div(self.gasPriceAndChangeRecipientFee, BYTES_16)

macro m_getChangeRecipientFee():
    (0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff & self.gasPriceAndChangeRecipientFee)

macro m_setGasPriceAndChangeRecipientFee($gasPrice, $changeRecipientFee):
    self.gasPriceAndChangeRecipientFee = ($gasPrice * BYTES_16) | $changeRecipientFee
